// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTodo = `-- name: CreateTodo :exec
INSERT INTO todos (id, title, description, completed, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateTodoParams struct {
	ID          uuid.UUID
	Title       string
	Description pgtype.Text
	Completed   bool
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) error {
	_, err := q.db.Exec(ctx, createTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE
FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const existsTodo = `-- name: ExistsTodo :one
SELECT EXISTS(SELECT 1 FROM todos WHERE id = $1 LIMIT 1)
`

func (q *Queries) ExistsTodo(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, existsTodo, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getTodo = `-- name: GetTodo :one
SELECT id, title, description, completed, created_at, updated_at
FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, title, description, completed, created_at, updated_at
FROM todos
ORDER BY title ASC
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET title       = $2,
    description = $3,
    completed   = $4,
    updated_at  = $5
WHERE id = $1
`

type UpdateTodoParams struct {
	ID          uuid.UUID
	Title       string
	Description pgtype.Text
	Completed   bool
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.Exec(ctx, updateTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.UpdatedAt,
	)
	return err
}
